# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'worker_view.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from model.week import Week
import matplotlib.pyplot as plt
from datetime import datetime, timedelta


class WorkerUi(object):
    def setupUi(self, BECARIO):
        BECARIO.setObjectName("BECARIO")
        BECARIO.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(BECARIO)
        self.centralwidget.setObjectName("centralwidget")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(110, 60, 251, 501))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.layoutFichajes = QtWidgets.QVBoxLayout()
        self.layoutFichajes.setObjectName("layoutFichajes")
        self.verticalLayout.addLayout(self.layoutFichajes)
        self.BtnFichar = QtWidgets.QPushButton(self.layoutWidget)
        self.BtnFichar.setObjectName("BtnFichar")
        self.verticalLayout.addWidget(self.BtnFichar)
        self.btnChangePassword = QtWidgets.QPushButton(self.centralwidget)
        self.btnChangePassword.setGeometry(QtCore.QRect(10, 20, 151, 23))
        self.btnChangePassword.setObjectName("btnChangePassword")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(560, 70, 160, 471))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.notifications_layout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.notifications_layout.setContentsMargins(0, 0, 0, 0)
        self.notifications_layout.setObjectName("notifications_layout")
        self.btnResumen = QtWidgets.QPushButton(self.centralwidget)
        self.btnResumen.setGeometry(QtCore.QRect(180, 20, 247, 23))
        self.btnResumen.setObjectName("btnResumen")
        self.refresh_btn = QtWidgets.QPushButton(self.centralwidget)
        self.refresh_btn.setGeometry(QtCore.QRect(560, 40, 131, 23))
        self.refresh_btn.setObjectName("refresh_btn")
        BECARIO.setCentralWidget(self.centralwidget)

        self.retranslateUi(BECARIO)
        QtCore.QMetaObject.connectSlotsByName(BECARIO)

    def retranslateUi(self, BECARIO):
        _translate = QtCore.QCoreApplication.translate
        BECARIO.setWindowTitle(_translate("BECARIO", "MainWindow"))
        self.BtnFichar.setText(_translate("BECARIO", "FICHAR"))
        self.btnChangePassword.setText(_translate("BECARIO", "CAMBIAR CONTRASEÑA"))
        self.btnResumen.setText(_translate("BECARIO", "VER RESUMEN"))
        self.refresh_btn.setText(_translate("BECARIO", "Recargar"))
        
        
    """START OWN CODE 
    ---------------------------------------------------------------------------------------------------------------------------------------------------
    """
        
    def addChecks(self,checks):
        for object in checks:
            label = QtWidgets.QLabel(object.get_output())
            self.layoutFichajes.addWidget(label)
            label.setAlignment(QtCore.Qt.AlignCenter)
            label.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
            if object.is_entry:
                label.setStyleSheet(
                    'background-color: green;font-size: 20px;border-radius: 10px;')
            else:
                label.setStyleSheet(
                    'background-color: red;font-size: 20px;border-radius: 10px;')

    def clear_layout(self, layout):
        # Borrar todos los widgets en el layout
        while layout.count():
            item = layout.takeAt(0)
            widget = item.widget()
            if widget:
                widget.deleteLater()
        if layout==self.layoutFichajes:    
            check_label = QtWidgets.QLabel()
            check_label.setText('Fichajes')
            check_label.setAlignment(QtCore.Qt.AlignCenter)
            check_label.setStyleSheet(
                "QLabel {"
                "   font-family: Decorative;"
                "   font-size: 20px;"
                "   color: black;"
                "   background-color: #FFB6C1;" 
                "}"
            )     
            layout.addWidget(check_label)
            
    def showError(self, e):
            error_message = QtWidgets.QMessageBox()
            error_message.setIcon(QtWidgets.QMessageBox.Critical)
            error_message.setWindowTitle('Error')
            error_message.setText(str(e))
            error_message.setStandardButtons(QtWidgets.QMessageBox.Ok)
            error_message.exec_()
            
    def addNotifications(self,notList):
        for i in notList:
            label = QtWidgets.QLabel(i.get_output())
            self.notifications_layout.addWidget(label)
            label.setAlignment(QtCore.Qt.AlignCenter)
            label.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
            if i.seen:
                label.setStyleSheet(
                    'background-color: green;font-size: 20px;border-radius: 10px;')
            else:
                label.setStyleSheet(
                    'background-color: red;font-size: 20px;border-radius: 10px;')
    
    def show_summary(self,weeks:list[Week]):
        # Ordenar las semanas por fecha
        weeks.sort(key=lambda x: datetime.strptime(x.monday, "%Y-%m-%d"))

        # Tomar las 10 últimas semanas
        last_10_weeks = weeks[-10:]

        # Crear listas de fechas y horas trabajadas
        fechas = [(datetime.strptime(week.monday, "%Y-%m-%d") + timedelta(days=7)).strftime("%Y-%m-%d") for week in last_10_weeks]
        horas_trabajadas = [week.total for week in last_10_weeks]

        # Colores de las barras según la condición
        colores = ['red' if week.is_above_threshold() else 'green' for week in last_10_weeks]

        # Crear el gráfico de barras
        plt.figure(figsize=(10, 6))
        plt.bar(fechas, horas_trabajadas, color=colores, label='Horas trabajadas')
        
        # Línea roja de puntos en y=10
        plt.axhline(y=10, color='r', linestyle='--', label='_nolegend_')

        # Personalizar el gráfico
        plt.title('Resumen semanal')
        plt.ylabel('Horas trabajadas')
        plt.xticks(rotation=45, ha='right')  # Rotar las fechas en el eje x
        plt.legend()

        # Mostrar el gráfico
        plt.tight_layout()
        plt.show()
                    
    
    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    BECARIO = QtWidgets.QMainWindow()
    ui = WorkerUi()
    ui.setupUi(BECARIO)
    BECARIO.show()
    sys.exit(app.exec_())
