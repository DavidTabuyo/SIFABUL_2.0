# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\admin_view.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from matplotlib import pyplot as plt
from datetime import datetime, timedelta
from model.dao.week_dao import Weekdao

from model.notification import Notification
from model.worker import Worker


class AdminUi(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(40, 20, 160, 501))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.list_layout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.list_layout.setContentsMargins(0, 0, 0, 0)
        self.list_layout.setObjectName("list_layout")
        self.edit_list_btn = QtWidgets.QPushButton(self.centralwidget)
        self.edit_list_btn.setGeometry(QtCore.QRect(70, 540, 75, 23))
        self.edit_list_btn.setObjectName("edit_list_btn")
        self.change_password_btn = QtWidgets.QPushButton(self.centralwidget)
        self.change_password_btn.setGeometry(QtCore.QRect(150, 540, 121, 23))
        self.change_password_btn.setObjectName("change_password_btn")
        self.send_notification_btn = QtWidgets.QPushButton(self.centralwidget)
        self.send_notification_btn.setGeometry(QtCore.QRect(330, 550, 121, 23))
        self.send_notification_btn.setObjectName("send_notification_btn")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(510, 20, 160, 501))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.notifications_layout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.notifications_layout.setContentsMargins(0, 0, 0, 0)
        self.notifications_layout.setObjectName("notifications_layout")
        self.update_btn = QtWidgets.QPushButton(self.centralwidget)
        self.update_btn.setGeometry(QtCore.QRect(550, 550, 75, 23))
        self.update_btn.setObjectName("update_btn")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.edit_list_btn.setText(_translate("MainWindow", "Editar lista"))
        self.change_password_btn.setText(_translate("MainWindow", "cambiar contraseña"))
        self.send_notification_btn.setText(_translate("MainWindow", "enviar notificacion"))
        self.update_btn.setText(_translate("MainWindow", "actualizar"))

    """START OWN CODE 
    ---------------------------------------------------------------------------------------------------------------------------------------------------
    """

    def clear_layout(self, layout):
        while layout.count():
            item = layout.takeAt(0)
            widget = item.widget()
            if widget:
                widget.deleteLater()
                
    def show_notifications(self, notList:list[Notification]):
        for i in notList:
            label = QtWidgets.QLabel(i.get_output())
            self.notifications_layout.addWidget(label)
            label.setAlignment(QtCore.Qt.AlignCenter)
            label.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
            #if all workers has seen the notificarion
            if i.is_seen:
                label.setStyleSheet('background-color: green;font-size: 20px;border-radius: 10px;')
            else:
                label.setStyleSheet('background-color: red;font-size: 20px;border-radius: 10px;')

    def show_workers(self, workerList: list[Worker]):
        for worker in workerList:
            button = QtWidgets.QPushButton(worker.get_output_for_list())
            self.list_layout.addWidget(button)
            button.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
            button.setStyleSheet('background-color: blue;font-size: 20px;border-radius: 10px;')
            button.clicked.connect(lambda _, w=worker: self.button_show_summary(w))
            
    def button_show_summary(self,worker:Worker):
        weeks=Weekdao.get_weeks(worker.worker_id)
        self.show_summary(weeks)
        
        
    def show_summary(self,weeks):
        # Ordenar las semanas por fecha
        weeks.sort(key=lambda x: datetime.strptime(x.monday, "%Y-%m-%d"))

        # Tomar las 10 últimas semanas
        last_10_weeks = weeks[-10:]

        # Crear listas de fechas, horas trabajadas y colores
        fechas = [(datetime.strptime(week.monday, "%Y-%m-%d") + timedelta(days=7)).strftime("%Y-%m-%d") for week in last_10_weeks]
        horas_trabajadas = [week.get_total_hours() for week in last_10_weeks]
        colores = ['red' if hour < 10 else 'green' for hour in horas_trabajadas]

        # Crear el gráfico de barras
        plt.figure(figsize=(10, 6))
        bars = plt.bar(fechas, horas_trabajadas, color=colores, label='Horas trabajadas')

        # Línea roja de puntos en y=10
        plt.axhline(y=10, color='r', linestyle='--', label='_nolegend_')

        # Mostrar el número de horas en formato "hh h mm min" en cada barra
        for bar, week in zip(bars, last_10_weeks):
            height = bar.get_height()
            formatted_total = week.get_formatted_total()
            plt.text(bar.get_x() + bar.get_width() / 2, height, formatted_total, ha='center', va='bottom')

        # Personalizar el gráfico
        plt.title('Resumen semanal')
        plt.ylabel('Horas trabajadas')
        plt.xticks(rotation=45, ha='right')  # Rotar las fechas en el eje x
        plt.ylim(0, 12)  # Rango del eje y hasta 12 horas
        plt.legend()

        # Mostrar el gráfico
        plt.tight_layout()
        plt.show(block=False)

        

        


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
